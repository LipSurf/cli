#!/usr/bin/env node
'use strict';
const meow = require('meow');
const rollup = require('rollup');
const getConfig = require('./rollup.config.js');
const globby = require('globby');


(async () => {
const cli = meow(`
	Usage
	  $ lipsurf-cli build -o/--out-dir [OUTDIR] [...PLUGINS]

	Options
    --watch
    --out-dir/-o

	Examples
	  $ lipsurf-cli build --watch
`, {
	flags: {
		watch: {
			type: 'boolean',
    },
    'out-dir': {
      type: 'string',
      default: 'dist',
      alias: 'o',
    }
	}
});

const FOLDER_REGX = /^src\/(.*)\/([^.]*).*$/;

async function build(flags, pluginNames) {
    const watch = flags.watch;
    if (!pluginNames.length) {
      pluginNames = Array.from(new Set(globby.sync(['src/*/*.ts', '!src/*/*.*.ts', '!src/@types'])
         .map(filePath => FOLDER_REGX.exec(filePath))
         .filter(regxRes => regxRes && regxRes[1] === regxRes[2]) 
         .map(regxRes => regxRes[1])));
    }
    const config = await getConfig(flags.outDir, pluginNames);
    if (watch) {
      const watcher = rollup.watch(config);
      watcher.on('event', event => {
        switch (event.code) {
          case 'END':
            console.log('Done building. Watching...');
            break;
          case 'ERROR':
          case 'FATAL':
            console.log(event.code, event.error);
            break;
        }
      });
    } else {
      for (let conf of config) {
        const bundle = await rollup.rollup(conf)
        await bundle.generate(conf);
        await bundle.write(conf);
      }
      console.log(`Done building.`);
    }
}

await build(cli.flags, cli.input.slice(1));
})();
